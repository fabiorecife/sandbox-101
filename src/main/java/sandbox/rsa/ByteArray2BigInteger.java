package sandbox.rsa;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.PrivateKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPrivateKeySpec;
import java.time.LocalDateTime;

public class ByteArray2BigInteger {

	public static void main(String[] args) throws UnsupportedEncodingException {
		System.out.println(LocalDateTime.now());
		
		String prime = "301757737954485403652763504864632506809262276411301046888313561998124076768189012802586610784617635455509592654893678221426917695021391630727953046281249037470344483689502608006673958945544647712289151068790865003767363037137315654304180455567357362620962890272557203331740089752299436691166741400226032912768866333430243996729293160374254021534625652201739857960249546147344287855779249667467839733099002846889850238335368207163242503838953792152609840592052973461665103386284263437960936570557594527993949779152675785163219380676923575293672399539542913674428775116020874248155297646476453968519285355068674281101609870440305120040647975481562076770661354538007635273057221434275283670368276719347664787569184642976171720939616528848599772043734790460609266049033789702908227766927107440208752461124465682027465803537353526873658213840502654872290067571253583877146337946140374344036174833692425744280853519160036441628447347538124373388333269416078157295946732030192100504294220113563777978323893299250344766781263726990618275063607731077466879518738662409723686314815499660478411137924511239552012869242489060593165824064559278309338621341556910525302921573874916758454436175458098121161769280163390371565787144322928256659147194239537096736821770239773923155219742662215756511830725826302567933261456065127373816605974523557302593892239769856184944342156224265808644836818076620454596680305068440338623341886882165441251916111209640248567918627740640229684086817407037576090926731605109250651066657955488297386848961669805054247574578306429438200082484379106363721107715829312122038289768255338819853546159517120375172638703963241691434023686281923912626245142071232429113689573958623340715213067544746080242890444858867205746857149864745227163975515326017149397946134607085374894988243316166393209959526727714739256289451862340688329864862657533924012999808047572254259124955450624865533205647989700080116563248552672690635033602127043452342081185716505385205775483725835539600439654105119065735909849674800244610501103854832832171040748792282909239215366981791760764978728870492684649529278942631860123536163704536284679047360085282151446416751591231287602218075283926460624223920435472656990735091457923222153074709140540726133596960069971951692157839608773841125853874625016577519596865926628318018041683849733418346329959427634184263349102551556976402006048661010220241264226320413076309984049713155814317983768340507378626268978475935852712554582114384752202486499674274059326989683079659356528873198803982562249870594750392224848556656515946566350879829751202327554098115903703492086664323116808721100083783996766778602471519104949107928865266692018162607912185851989270981364798529615543579834791225858166105216881801741156557160950866992416020259213717443543626421438171430100896021287884904167302018052437486531501351609078192741343844819912114206382696495589717172327282871783391834868388555400753824141334889468053";
		BigInteger p = new BigInteger(prime);
		System.out.println("p " + p.bitLength());
		System.out.println(p.toByteArray().length);
		
		String numero = "127529353104145855604848801036866616280166079002254795915728875880062449615574281176431694571268906610651746355988804517971109506059117300767078215544078050495288898079966333020471064587772021091382750742975871608922087777425880727290191660453194101940365123607820254032693380414253171860265869420327526921238155999869298289215583173835729806142265487986409825592489230975689285842771129595102055111734714164516867962899936948033752922918446377249871922216217514363012699397286878693269586481421469637640157505292276857476131191200311702024720252465713939061050270339090549213424760933220538078349126309096023217817364058017791384634506420689252106468108842692852187475236448775258379059100814229440951071087456975852903356266996551610420655228286121374299067884652223669882491573839345985962116274710587823133206467542317688295450431812713783125324474922351515811177201306310351181123108198634078075590583796561595155839580260304761004370189288024314879462696808406845977598965670541773360054559200691971679169717567826307372451218842740483094165211292058165274490912552041246006596575736362118469853523901477917611598968728439155707922012350113652642079525741265667258038062702544779645282323442049563871373677517994805272122840139303837252347456221327288939185157290828322434222167303022750709657485082425086706905518550155175057319054552801311490570386361464303691241516471169886968659739994038220791802202668917326739336412020982460099726750105925488619691606218029684637708657592713400206226986004244256669699519428474791359289791210750408195868285560638693990044485513637789433787356517755901174143359154588479111014033806400316773848243170183731134110953383749334279576689240364731761774740426673003775432902007956395608444533051083929424656639122647933299998415079427881678048074886764153815761103282418726567006015022821577615001377577683007432581507558542072005506931327659669993257988678128597298773940696261108434077410494495372127327342790075619405904059043253580011460029353789625976809698618638007232706629978137017224168867182756879404214996801656391295123481756259210998037653265690891906131929701827757733919115796211000862015555374822527522474125486184280463196444945424394218773527595974569440480153623145740620545053469823161211882971487087554880753766418151808906611346359583519468456775892177885317654179019527795126484782013170067030936576908509360083389667042694192910811580063998101658397578801751972739895855452824120279578394747196518581646832001701606973400889787403256703699922836836731213740030993104343167441497274665844588186913527729833222360163437774128815331685738553675398682543451020397990676434209442929482219718887121548176817728508401244199863183375685481561307658458056087540215265882657047440423766813279052758165888259815647746299039054650763596768666445360297903649615339055793120781556500585124345144893003845598918275514259563191601974895274733420642764752126886322131966429145048337";
		BigInteger n = new BigInteger(numero);
		System.out.println("n " + n.bitLength());
		System.out.println(n.toByteArray().length);
		
		KeyManager km = new KeyManager();
		km.generate();
		PrivateKey pk = km.getKeyPair().getPrivate();
		RSAPrivateKey rsapk = (RSAPrivateKey) pk;
		RSAPublicKey rsapub = (RSAPublicKey) km.getKeyPair().getPublic();
		
		System.out.println("modulus");
		System.out.println(rsapk.getModulus().toByteArray().length);
		System.out.println(rsapk.getPrivateExponent().toByteArray().length);
		System.out.println(rsapub.getPublicExponent().toByteArray().length);
		
		System.out.println("====");
		System.out.println("1234567890123456789012345678901234567890".getBytes().length);
		System.out.println("====");
		//new RSAPublicKeySpec()
		//new RSAPrivateKeySpec();
		
		System.out.println(rsapk.getModulus().bitLength());
		System.out.println(rsapk.getPrivateExponent().bitLength());
		System.out.println(rsapk.getPrivateExponent().toByteArray().length);
		
		
		byte[] b = "f√°bio".getBytes("UTF-8");
		BigInteger bi = new BigInteger(b);
		String s = new String(bi.toByteArray());
	
		System.out.println(s);
		System.out.println(bi);
	}
	
}
